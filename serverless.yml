service: dynaless-local

frameworkVersion: "2"

plugins:
  - serverless-s3-local
  - serverless-dynamodb-local
  - serverless-offline

custom:
  tableName: poke-data-table
  bucketName: poke-project-bucket-rodrigo
  serverless-offline:
    httpPort: 4000
  s3:
    host: localhost
    directory: .buckets
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: src/offline/migrations

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: sa-east-1
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
      Resource: "*"

functions:
  getKantoPokemon:
    handler: src/controllers/getKantoPokemon.handler
    events:
      - http:
          path: get-kanto-pokemon
          method: get

  getOnePokemon:
    handler: src/controllers/getOnePokemon.handler
    events:
      - http:
          path: get-one-pokemon/{ID}
          method: get

  getTeamPokemon:
    handler: src/controllers/getTeamPokemon.handler
    events:
      - http:
          path: get-team-pokemon/{ID}
          method: get

  addPokemon:
    handler: src/controllers/addPokemon.handler
    events:
      - http:
          path: add-pokemon/{ID}
          method: post

resources:
  Resources:
    BucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
